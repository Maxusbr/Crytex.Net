//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project.Service.Executor {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Executor.IReceiverService")]
    public interface IReceiverService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiverService/CreateVm", ReplyAction="http://tempuri.org/IReceiverService/CreateVmResponse")]
        void CreateVm(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiverService/CreateVm", ReplyAction="http://tempuri.org/IReceiverService/CreateVmResponse")]
        System.Threading.Tasks.Task CreateVmAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiverService/UpdateVm", ReplyAction="http://tempuri.org/IReceiverService/UpdateVmResponse")]
        void UpdateVm(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiverService/UpdateVm", ReplyAction="http://tempuri.org/IReceiverService/UpdateVmResponse")]
        System.Threading.Tasks.Task UpdateVmAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiverService/StandartVmTask", ReplyAction="http://tempuri.org/IReceiverService/StandartVmTaskResponse")]
        void StandartVmTask(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiverService/StandartVmTask", ReplyAction="http://tempuri.org/IReceiverService/StandartVmTaskResponse")]
        System.Threading.Tasks.Task StandartVmTaskAsync(int ID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReceiverServiceChannel : Project.Service.Executor.IReceiverService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReceiverServiceClient : System.ServiceModel.ClientBase<Project.Service.Executor.IReceiverService>, Project.Service.Executor.IReceiverService {
        
        public ReceiverServiceClient() {
        }
        
        public ReceiverServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReceiverServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReceiverServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReceiverServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateVm(int ID) {
            base.Channel.CreateVm(ID);
        }
        
        public System.Threading.Tasks.Task CreateVmAsync(int ID) {
            return base.Channel.CreateVmAsync(ID);
        }
        
        public void UpdateVm(int ID) {
            base.Channel.UpdateVm(ID);
        }
        
        public System.Threading.Tasks.Task UpdateVmAsync(int ID) {
            return base.Channel.UpdateVmAsync(ID);
        }
        
        public void StandartVmTask(int ID) {
            base.Channel.StandartVmTask(ID);
        }
        
        public System.Threading.Tasks.Task StandartVmTaskAsync(int ID) {
            return base.Channel.StandartVmTaskAsync(ID);
        }
    }
}
